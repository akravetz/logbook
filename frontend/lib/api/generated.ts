/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Workout API
 * A workout tracking API built with FastAPI
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  DatabaseHealthResponse,
  DevLoginRequest,
  DevLoginResponse,
  ExerciseCreate,
  ExerciseExecutionRequest,
  ExerciseExecutionResponse,
  ExerciseExecutionUpdate,
  ExerciseReorderRequest,
  ExerciseReorderResponse,
  ExerciseResponse,
  ExerciseUpdate,
  FullHealthResponse,
  GetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetParams,
  GetExercisesByModalityApiV1ExercisesByModalityModalityGetParams,
  GetMyExercisesApiV1ExercisesMyExercisesGetParams,
  GetSystemExercisesApiV1ExercisesSystemGetParams,
  GetUserStatisticsApiV1UsersMeStatsGetParams,
  HTTPValidationError,
  ListWorkoutsApiV1WorkoutsGetParams,
  LogoutResponse,
  NextAuthGoogleUserRequest,
  NextAuthVerificationResponse,
  PageExerciseResponse,
  PageWorkoutResponse,
  SearchExercisesApiV1ExercisesGetParams,
  SessionInfoResponse,
  SetCreate,
  SetResponse,
  SetUpdate,
  SimpleHealthResponse,
  SystemInfoResponse,
  TokenRefreshRequest,
  TokenRefreshResponse,
  TokenValidationResponse,
  UserProfileUpdate,
  UserResponse,
  UserStatsResponse,
  WorkoutResponse,
} from "./model";
import { customInstance } from "./mutator";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Root endpoint.
 * @summary Root
 */
export const rootGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>({ url: `/`, method: "GET", signal }, options);
};

export const getRootGetQueryKey = () => {
  return [`/`] as const;
};

export const getRootGetQueryOptions = <
  TData = Awaited<ReturnType<typeof rootGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRootGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rootGet>>> = ({
    signal,
  }) => rootGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof rootGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type RootGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof rootGet>>
>;
export type RootGetQueryError = unknown;

/**
 * @summary Root
 */
export const useRootGet = <
  TData = Awaited<ReturnType<typeof rootGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof rootGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRootGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Simple health check - is the application running?
 * @summary Simple Health Check
 */
export const simpleHealthCheckApiV1HealthGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SimpleHealthResponse>(
    { url: `/api/v1/health/`, method: "GET", signal },
    options,
  );
};

export const getSimpleHealthCheckApiV1HealthGetQueryKey = () => {
  return [`/api/v1/health/`] as const;
};

export const getSimpleHealthCheckApiV1HealthGetQueryOptions = <
  TData = Awaited<ReturnType<typeof simpleHealthCheckApiV1HealthGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof simpleHealthCheckApiV1HealthGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSimpleHealthCheckApiV1HealthGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof simpleHealthCheckApiV1HealthGet>>
  > = ({ signal }) => simpleHealthCheckApiV1HealthGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof simpleHealthCheckApiV1HealthGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SimpleHealthCheckApiV1HealthGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof simpleHealthCheckApiV1HealthGet>>
>;
export type SimpleHealthCheckApiV1HealthGetQueryError = unknown;

/**
 * @summary Simple Health Check
 */
export const useSimpleHealthCheckApiV1HealthGet = <
  TData = Awaited<ReturnType<typeof simpleHealthCheckApiV1HealthGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof simpleHealthCheckApiV1HealthGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSimpleHealthCheckApiV1HealthGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Database health check - can we connect to the database?
 * @summary Database Health Check
 */
export const databaseHealthCheckApiV1HealthDbGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<DatabaseHealthResponse>(
    { url: `/api/v1/health/db`, method: "GET", signal },
    options,
  );
};

export const getDatabaseHealthCheckApiV1HealthDbGetQueryKey = () => {
  return [`/api/v1/health/db`] as const;
};

export const getDatabaseHealthCheckApiV1HealthDbGetQueryOptions = <
  TData = Awaited<ReturnType<typeof databaseHealthCheckApiV1HealthDbGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof databaseHealthCheckApiV1HealthDbGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDatabaseHealthCheckApiV1HealthDbGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof databaseHealthCheckApiV1HealthDbGet>>
  > = ({ signal }) =>
    databaseHealthCheckApiV1HealthDbGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof databaseHealthCheckApiV1HealthDbGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DatabaseHealthCheckApiV1HealthDbGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof databaseHealthCheckApiV1HealthDbGet>>
>;
export type DatabaseHealthCheckApiV1HealthDbGetQueryError = unknown;

/**
 * @summary Database Health Check
 */
export const useDatabaseHealthCheckApiV1HealthDbGet = <
  TData = Awaited<ReturnType<typeof databaseHealthCheckApiV1HealthDbGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof databaseHealthCheckApiV1HealthDbGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getDatabaseHealthCheckApiV1HealthDbGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Comprehensive health check - app and database status.
 * @summary Full Health Check
 */
export const fullHealthCheckApiV1HealthFullGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FullHealthResponse>(
    { url: `/api/v1/health/full`, method: "GET", signal },
    options,
  );
};

export const getFullHealthCheckApiV1HealthFullGetQueryKey = () => {
  return [`/api/v1/health/full`] as const;
};

export const getFullHealthCheckApiV1HealthFullGetQueryOptions = <
  TData = Awaited<ReturnType<typeof fullHealthCheckApiV1HealthFullGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fullHealthCheckApiV1HealthFullGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFullHealthCheckApiV1HealthFullGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof fullHealthCheckApiV1HealthFullGet>>
  > = ({ signal }) => fullHealthCheckApiV1HealthFullGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof fullHealthCheckApiV1HealthFullGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type FullHealthCheckApiV1HealthFullGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof fullHealthCheckApiV1HealthFullGet>>
>;
export type FullHealthCheckApiV1HealthFullGetQueryError = unknown;

/**
 * @summary Full Health Check
 */
export const useFullHealthCheckApiV1HealthFullGet = <
  TData = Awaited<ReturnType<typeof fullHealthCheckApiV1HealthFullGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof fullHealthCheckApiV1HealthFullGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getFullHealthCheckApiV1HealthFullGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get system configuration and runtime information.
 * @summary System Info
 */
export const systemInfoApiV1HealthSystemGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SystemInfoResponse>(
    { url: `/api/v1/health/system`, method: "GET", signal },
    options,
  );
};

export const getSystemInfoApiV1HealthSystemGetQueryKey = () => {
  return [`/api/v1/health/system`] as const;
};

export const getSystemInfoApiV1HealthSystemGetQueryOptions = <
  TData = Awaited<ReturnType<typeof systemInfoApiV1HealthSystemGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof systemInfoApiV1HealthSystemGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSystemInfoApiV1HealthSystemGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof systemInfoApiV1HealthSystemGet>>
  > = ({ signal }) => systemInfoApiV1HealthSystemGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof systemInfoApiV1HealthSystemGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SystemInfoApiV1HealthSystemGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemInfoApiV1HealthSystemGet>>
>;
export type SystemInfoApiV1HealthSystemGetQueryError = unknown;

/**
 * @summary System Info
 */
export const useSystemInfoApiV1HealthSystemGet = <
  TData = Awaited<ReturnType<typeof systemInfoApiV1HealthSystemGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof systemInfoApiV1HealthSystemGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemInfoApiV1HealthSystemGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Use refresh token to get new access token
 * @summary Refresh access token
 */
export const refreshTokenApiV1AuthRefreshPost = (
  tokenRefreshRequest: TokenRefreshRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<TokenRefreshResponse>(
    {
      url: `/api/v1/auth/refresh`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: tokenRefreshRequest,
    },
    options,
  );
};

export const getRefreshTokenApiV1AuthRefreshPostMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>,
    TError,
    { data: TokenRefreshRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>,
  TError,
  { data: TokenRefreshRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>,
    { data: TokenRefreshRequest }
  > = (props) => {
    const { data } = props ?? {};

    return refreshTokenApiV1AuthRefreshPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenApiV1AuthRefreshPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>
>;
export type RefreshTokenApiV1AuthRefreshPostMutationBody = TokenRefreshRequest;
export type RefreshTokenApiV1AuthRefreshPostMutationError =
  void | HTTPValidationError;

/**
 * @summary Refresh access token
 */
export const useRefreshTokenApiV1AuthRefreshPost = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>,
    TError,
    { data: TokenRefreshRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>,
  TError,
  { data: TokenRefreshRequest },
  TContext
> => {
  const mutationOptions =
    getRefreshTokenApiV1AuthRefreshPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Logout current user (client-side token invalidation)
 * @summary Logout user
 */
export const logoutApiV1AuthLogoutPost = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<LogoutResponse>(
    { url: `/api/v1/auth/logout`, method: "POST" },
    options,
  );
};

export const getLogoutApiV1AuthLogoutPostMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>,
    void
  > = () => {
    return logoutApiV1AuthLogoutPost(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutApiV1AuthLogoutPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>
>;

export type LogoutApiV1AuthLogoutPostMutationError = unknown;

/**
 * @summary Logout user
 */
export const useLogoutApiV1AuthLogoutPost = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutApiV1AuthLogoutPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get information about the current authenticated session
 * @summary Get current session info
 */
export const getSessionInfoApiV1AuthMeGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SessionInfoResponse>(
    { url: `/api/v1/auth/me`, method: "GET", signal },
    options,
  );
};

export const getGetSessionInfoApiV1AuthMeGetQueryKey = () => {
  return [`/api/v1/auth/me`] as const;
};

export const getGetSessionInfoApiV1AuthMeGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSessionInfoApiV1AuthMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getSessionInfoApiV1AuthMeGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSessionInfoApiV1AuthMeGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSessionInfoApiV1AuthMeGet>>
  > = ({ signal }) => getSessionInfoApiV1AuthMeGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSessionInfoApiV1AuthMeGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSessionInfoApiV1AuthMeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSessionInfoApiV1AuthMeGet>>
>;
export type GetSessionInfoApiV1AuthMeGetQueryError = unknown;

/**
 * @summary Get current session info
 */
export const useGetSessionInfoApiV1AuthMeGet = <
  TData = Awaited<ReturnType<typeof getSessionInfoApiV1AuthMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getSessionInfoApiV1AuthMeGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSessionInfoApiV1AuthMeGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Validate JWT token and return token information
 * @summary Validate token
 */
export const validateTokenApiV1AuthValidateGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<TokenValidationResponse>(
    { url: `/api/v1/auth/validate`, method: "GET", signal },
    options,
  );
};

export const getValidateTokenApiV1AuthValidateGetQueryKey = () => {
  return [`/api/v1/auth/validate`] as const;
};

export const getValidateTokenApiV1AuthValidateGetQueryOptions = <
  TData = Awaited<ReturnType<typeof validateTokenApiV1AuthValidateGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof validateTokenApiV1AuthValidateGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getValidateTokenApiV1AuthValidateGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof validateTokenApiV1AuthValidateGet>>
  > = ({ signal }) => validateTokenApiV1AuthValidateGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof validateTokenApiV1AuthValidateGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ValidateTokenApiV1AuthValidateGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof validateTokenApiV1AuthValidateGet>>
>;
export type ValidateTokenApiV1AuthValidateGetQueryError = unknown;

/**
 * @summary Validate token
 */
export const useValidateTokenApiV1AuthValidateGet = <
  TData = Awaited<ReturnType<typeof validateTokenApiV1AuthValidateGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof validateTokenApiV1AuthValidateGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getValidateTokenApiV1AuthValidateGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create or update user from Google OAuth data via NextAuth.js
 * @summary Verify Google user for NextAuth
 */
export const verifyGoogleUserApiV1AuthVerifyGoogleUserPost = (
  nextAuthGoogleUserRequest: NextAuthGoogleUserRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<NextAuthVerificationResponse>(
    {
      url: `/api/v1/auth/verify-google-user`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: nextAuthGoogleUserRequest,
    },
    options,
  );
};

export const getVerifyGoogleUserApiV1AuthVerifyGoogleUserPostMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyGoogleUserApiV1AuthVerifyGoogleUserPost>>,
    TError,
    { data: NextAuthGoogleUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyGoogleUserApiV1AuthVerifyGoogleUserPost>>,
  TError,
  { data: NextAuthGoogleUserRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyGoogleUserApiV1AuthVerifyGoogleUserPost>>,
    { data: NextAuthGoogleUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return verifyGoogleUserApiV1AuthVerifyGoogleUserPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyGoogleUserApiV1AuthVerifyGoogleUserPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof verifyGoogleUserApiV1AuthVerifyGoogleUserPost>>
  >;
export type VerifyGoogleUserApiV1AuthVerifyGoogleUserPostMutationBody =
  NextAuthGoogleUserRequest;
export type VerifyGoogleUserApiV1AuthVerifyGoogleUserPostMutationError = void;

/**
 * @summary Verify Google user for NextAuth
 */
export const useVerifyGoogleUserApiV1AuthVerifyGoogleUserPost = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyGoogleUserApiV1AuthVerifyGoogleUserPost>>,
    TError,
    { data: NextAuthGoogleUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof verifyGoogleUserApiV1AuthVerifyGoogleUserPost>>,
  TError,
  { data: NextAuthGoogleUserRequest },
  TContext
> => {
  const mutationOptions =
    getVerifyGoogleUserApiV1AuthVerifyGoogleUserPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Login with any email in development environment only
 * @summary Development login
 */
export const devLoginApiV1AuthDevLoginPost = (
  devLoginRequest: DevLoginRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DevLoginResponse>(
    {
      url: `/api/v1/auth/dev-login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: devLoginRequest,
    },
    options,
  );
};

export const getDevLoginApiV1AuthDevLoginPostMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof devLoginApiV1AuthDevLoginPost>>,
    TError,
    { data: DevLoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof devLoginApiV1AuthDevLoginPost>>,
  TError,
  { data: DevLoginRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof devLoginApiV1AuthDevLoginPost>>,
    { data: DevLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return devLoginApiV1AuthDevLoginPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DevLoginApiV1AuthDevLoginPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof devLoginApiV1AuthDevLoginPost>>
>;
export type DevLoginApiV1AuthDevLoginPostMutationBody = DevLoginRequest;
export type DevLoginApiV1AuthDevLoginPostMutationError = void;

/**
 * @summary Development login
 */
export const useDevLoginApiV1AuthDevLoginPost = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof devLoginApiV1AuthDevLoginPost>>,
    TError,
    { data: DevLoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof devLoginApiV1AuthDevLoginPost>>,
  TError,
  { data: DevLoginRequest },
  TContext
> => {
  const mutationOptions =
    getDevLoginApiV1AuthDevLoginPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieve the authenticated user's profile information.
 * @summary Get current user profile
 */
export const getCurrentUserProfileApiV1UsersMeGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>(
    { url: `/api/v1/users/me`, method: "GET", signal },
    options,
  );
};

export const getGetCurrentUserProfileApiV1UsersMeGetQueryKey = () => {
  return [`/api/v1/users/me`] as const;
};

export const getGetCurrentUserProfileApiV1UsersMeGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUserProfileApiV1UsersMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCurrentUserProfileApiV1UsersMeGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCurrentUserProfileApiV1UsersMeGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentUserProfileApiV1UsersMeGet>>
  > = ({ signal }) =>
    getCurrentUserProfileApiV1UsersMeGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUserProfileApiV1UsersMeGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCurrentUserProfileApiV1UsersMeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUserProfileApiV1UsersMeGet>>
>;
export type GetCurrentUserProfileApiV1UsersMeGetQueryError = unknown;

/**
 * @summary Get current user profile
 */
export const useGetCurrentUserProfileApiV1UsersMeGet = <
  TData = Awaited<ReturnType<typeof getCurrentUserProfileApiV1UsersMeGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCurrentUserProfileApiV1UsersMeGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetCurrentUserProfileApiV1UsersMeGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Deactivate the authenticated user's account (soft delete).
 * @summary Deactivate user account
 */
export const deactivateCurrentUserApiV1UsersMeDelete = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    { url: `/api/v1/users/me`, method: "DELETE" },
    options,
  );
};

export const getDeactivateCurrentUserApiV1UsersMeDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deactivateCurrentUserApiV1UsersMeDelete>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deactivateCurrentUserApiV1UsersMeDelete>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deactivateCurrentUserApiV1UsersMeDelete>>,
    void
  > = () => {
    return deactivateCurrentUserApiV1UsersMeDelete(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeactivateCurrentUserApiV1UsersMeDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deactivateCurrentUserApiV1UsersMeDelete>>
>;

export type DeactivateCurrentUserApiV1UsersMeDeleteMutationError = unknown;

/**
 * @summary Deactivate user account
 */
export const useDeactivateCurrentUserApiV1UsersMeDelete = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deactivateCurrentUserApiV1UsersMeDelete>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deactivateCurrentUserApiV1UsersMeDelete>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getDeactivateCurrentUserApiV1UsersMeDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update the authenticated user's profile information.
 * @summary Update current user profile
 */
export const updateCurrentUserProfileApiV1UsersMePatch = (
  userProfileUpdate: UserProfileUpdate,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserResponse>(
    {
      url: `/api/v1/users/me`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: userProfileUpdate,
    },
    options,
  );
};

export const getUpdateCurrentUserProfileApiV1UsersMePatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserProfileApiV1UsersMePatch>>,
    TError,
    { data: UserProfileUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCurrentUserProfileApiV1UsersMePatch>>,
  TError,
  { data: UserProfileUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCurrentUserProfileApiV1UsersMePatch>>,
    { data: UserProfileUpdate }
  > = (props) => {
    const { data } = props ?? {};

    return updateCurrentUserProfileApiV1UsersMePatch(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserProfileApiV1UsersMePatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateCurrentUserProfileApiV1UsersMePatch>>
  >;
export type UpdateCurrentUserProfileApiV1UsersMePatchMutationBody =
  UserProfileUpdate;
export type UpdateCurrentUserProfileApiV1UsersMePatchMutationError =
  HTTPValidationError;

/**
 * @summary Update current user profile
 */
export const useUpdateCurrentUserProfileApiV1UsersMePatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUserProfileApiV1UsersMePatch>>,
    TError,
    { data: UserProfileUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCurrentUserProfileApiV1UsersMePatch>>,
  TError,
  { data: UserProfileUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateCurrentUserProfileApiV1UsersMePatchMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieve workout statistics for the authenticated user.
 * @summary Get user workout statistics
 */
export const getUserStatisticsApiV1UsersMeStatsGet = (
  params?: GetUserStatisticsApiV1UsersMeStatsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserStatsResponse>(
    { url: `/api/v1/users/me/stats`, method: "GET", params, signal },
    options,
  );
};

export const getGetUserStatisticsApiV1UsersMeStatsGetQueryKey = (
  params?: GetUserStatisticsApiV1UsersMeStatsGetParams,
) => {
  return [`/api/v1/users/me/stats`, ...(params ? [params] : [])] as const;
};

export const getGetUserStatisticsApiV1UsersMeStatsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserStatisticsApiV1UsersMeStatsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetUserStatisticsApiV1UsersMeStatsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserStatisticsApiV1UsersMeStatsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserStatisticsApiV1UsersMeStatsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserStatisticsApiV1UsersMeStatsGet>>
  > = ({ signal }) =>
    getUserStatisticsApiV1UsersMeStatsGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserStatisticsApiV1UsersMeStatsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserStatisticsApiV1UsersMeStatsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserStatisticsApiV1UsersMeStatsGet>>
>;
export type GetUserStatisticsApiV1UsersMeStatsGetQueryError =
  HTTPValidationError;

/**
 * @summary Get user workout statistics
 */
export const useGetUserStatisticsApiV1UsersMeStatsGet = <
  TData = Awaited<ReturnType<typeof getUserStatisticsApiV1UsersMeStatsGet>>,
  TError = HTTPValidationError,
>(
  params?: GetUserStatisticsApiV1UsersMeStatsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserStatisticsApiV1UsersMeStatsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserStatisticsApiV1UsersMeStatsGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Search and filter exercises with pagination. Public endpoint - shows only system exercises unless authenticated.
 * @summary Search exercises
 */
export const searchExercisesApiV1ExercisesGet = (
  params?: SearchExercisesApiV1ExercisesGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageExerciseResponse>(
    { url: `/api/v1/exercises/`, method: "GET", params, signal },
    options,
  );
};

export const getSearchExercisesApiV1ExercisesGetQueryKey = (
  params?: SearchExercisesApiV1ExercisesGetParams,
) => {
  return [`/api/v1/exercises/`, ...(params ? [params] : [])] as const;
};

export const getSearchExercisesApiV1ExercisesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof searchExercisesApiV1ExercisesGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchExercisesApiV1ExercisesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchExercisesApiV1ExercisesGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSearchExercisesApiV1ExercisesGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchExercisesApiV1ExercisesGet>>
  > = ({ signal }) =>
    searchExercisesApiV1ExercisesGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchExercisesApiV1ExercisesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchExercisesApiV1ExercisesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchExercisesApiV1ExercisesGet>>
>;
export type SearchExercisesApiV1ExercisesGetQueryError = HTTPValidationError;

/**
 * @summary Search exercises
 */
export const useSearchExercisesApiV1ExercisesGet = <
  TData = Awaited<ReturnType<typeof searchExercisesApiV1ExercisesGet>>,
  TError = HTTPValidationError,
>(
  params?: SearchExercisesApiV1ExercisesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchExercisesApiV1ExercisesGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSearchExercisesApiV1ExercisesGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new user exercise.
 * @summary Create exercise
 */
export const createExerciseApiV1ExercisesPost = (
  exerciseCreate: ExerciseCreate,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ExerciseResponse>(
    {
      url: `/api/v1/exercises/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: exerciseCreate,
    },
    options,
  );
};

export const getCreateExerciseApiV1ExercisesPostMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createExerciseApiV1ExercisesPost>>,
    TError,
    { data: ExerciseCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createExerciseApiV1ExercisesPost>>,
  TError,
  { data: ExerciseCreate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createExerciseApiV1ExercisesPost>>,
    { data: ExerciseCreate }
  > = (props) => {
    const { data } = props ?? {};

    return createExerciseApiV1ExercisesPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateExerciseApiV1ExercisesPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createExerciseApiV1ExercisesPost>>
>;
export type CreateExerciseApiV1ExercisesPostMutationBody = ExerciseCreate;
export type CreateExerciseApiV1ExercisesPostMutationError = HTTPValidationError;

/**
 * @summary Create exercise
 */
export const useCreateExerciseApiV1ExercisesPost = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createExerciseApiV1ExercisesPost>>,
    TError,
    { data: ExerciseCreate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createExerciseApiV1ExercisesPost>>,
  TError,
  { data: ExerciseCreate },
  TContext
> => {
  const mutationOptions =
    getCreateExerciseApiV1ExercisesPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get list of all available body parts from exercises user can access.
 * @summary Get available body parts
 */
export const getBodyPartsApiV1ExercisesBodyPartsGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string[]>(
    { url: `/api/v1/exercises/body-parts`, method: "GET", signal },
    options,
  );
};

export const getGetBodyPartsApiV1ExercisesBodyPartsGetQueryKey = () => {
  return [`/api/v1/exercises/body-parts`] as const;
};

export const getGetBodyPartsApiV1ExercisesBodyPartsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getBodyPartsApiV1ExercisesBodyPartsGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getBodyPartsApiV1ExercisesBodyPartsGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetBodyPartsApiV1ExercisesBodyPartsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getBodyPartsApiV1ExercisesBodyPartsGet>>
  > = ({ signal }) =>
    getBodyPartsApiV1ExercisesBodyPartsGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBodyPartsApiV1ExercisesBodyPartsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetBodyPartsApiV1ExercisesBodyPartsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBodyPartsApiV1ExercisesBodyPartsGet>>
>;
export type GetBodyPartsApiV1ExercisesBodyPartsGetQueryError = unknown;

/**
 * @summary Get available body parts
 */
export const useGetBodyPartsApiV1ExercisesBodyPartsGet = <
  TData = Awaited<ReturnType<typeof getBodyPartsApiV1ExercisesBodyPartsGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getBodyPartsApiV1ExercisesBodyPartsGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetBodyPartsApiV1ExercisesBodyPartsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get list of all available exercise modalities.
 * @summary Get available modalities
 */
export const getModalitiesApiV1ExercisesModalitiesGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string[]>(
    { url: `/api/v1/exercises/modalities`, method: "GET", signal },
    options,
  );
};

export const getGetModalitiesApiV1ExercisesModalitiesGetQueryKey = () => {
  return [`/api/v1/exercises/modalities`] as const;
};

export const getGetModalitiesApiV1ExercisesModalitiesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getModalitiesApiV1ExercisesModalitiesGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getModalitiesApiV1ExercisesModalitiesGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetModalitiesApiV1ExercisesModalitiesGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getModalitiesApiV1ExercisesModalitiesGet>>
  > = ({ signal }) =>
    getModalitiesApiV1ExercisesModalitiesGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getModalitiesApiV1ExercisesModalitiesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetModalitiesApiV1ExercisesModalitiesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getModalitiesApiV1ExercisesModalitiesGet>>
>;
export type GetModalitiesApiV1ExercisesModalitiesGetQueryError = unknown;

/**
 * @summary Get available modalities
 */
export const useGetModalitiesApiV1ExercisesModalitiesGet = <
  TData = Awaited<ReturnType<typeof getModalitiesApiV1ExercisesModalitiesGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getModalitiesApiV1ExercisesModalitiesGet>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetModalitiesApiV1ExercisesModalitiesGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get system exercises with pagination.
 * @summary Get system exercises
 */
export const getSystemExercisesApiV1ExercisesSystemGet = (
  params?: GetSystemExercisesApiV1ExercisesSystemGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageExerciseResponse>(
    { url: `/api/v1/exercises/system`, method: "GET", params, signal },
    options,
  );
};

export const getGetSystemExercisesApiV1ExercisesSystemGetQueryKey = (
  params?: GetSystemExercisesApiV1ExercisesSystemGetParams,
) => {
  return [`/api/v1/exercises/system`, ...(params ? [params] : [])] as const;
};

export const getGetSystemExercisesApiV1ExercisesSystemGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSystemExercisesApiV1ExercisesSystemGet>>,
  TError = HTTPValidationError,
>(
  params?: GetSystemExercisesApiV1ExercisesSystemGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSystemExercisesApiV1ExercisesSystemGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSystemExercisesApiV1ExercisesSystemGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSystemExercisesApiV1ExercisesSystemGet>>
  > = ({ signal }) =>
    getSystemExercisesApiV1ExercisesSystemGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSystemExercisesApiV1ExercisesSystemGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSystemExercisesApiV1ExercisesSystemGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSystemExercisesApiV1ExercisesSystemGet>>
>;
export type GetSystemExercisesApiV1ExercisesSystemGetQueryError =
  HTTPValidationError;

/**
 * @summary Get system exercises
 */
export const useGetSystemExercisesApiV1ExercisesSystemGet = <
  TData = Awaited<ReturnType<typeof getSystemExercisesApiV1ExercisesSystemGet>>,
  TError = HTTPValidationError,
>(
  params?: GetSystemExercisesApiV1ExercisesSystemGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSystemExercisesApiV1ExercisesSystemGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSystemExercisesApiV1ExercisesSystemGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get exercises created by the current user.
 * @summary Get user's own exercises
 */
export const getMyExercisesApiV1ExercisesMyExercisesGet = (
  params?: GetMyExercisesApiV1ExercisesMyExercisesGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageExerciseResponse>(
    { url: `/api/v1/exercises/my-exercises`, method: "GET", params, signal },
    options,
  );
};

export const getGetMyExercisesApiV1ExercisesMyExercisesGetQueryKey = (
  params?: GetMyExercisesApiV1ExercisesMyExercisesGetParams,
) => {
  return [
    `/api/v1/exercises/my-exercises`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMyExercisesApiV1ExercisesMyExercisesGetQueryOptions = <
  TData = Awaited<
    ReturnType<typeof getMyExercisesApiV1ExercisesMyExercisesGet>
  >,
  TError = HTTPValidationError,
>(
  params?: GetMyExercisesApiV1ExercisesMyExercisesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyExercisesApiV1ExercisesMyExercisesGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetMyExercisesApiV1ExercisesMyExercisesGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMyExercisesApiV1ExercisesMyExercisesGet>>
  > = ({ signal }) =>
    getMyExercisesApiV1ExercisesMyExercisesGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyExercisesApiV1ExercisesMyExercisesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetMyExercisesApiV1ExercisesMyExercisesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyExercisesApiV1ExercisesMyExercisesGet>>
>;
export type GetMyExercisesApiV1ExercisesMyExercisesGetQueryError =
  HTTPValidationError;

/**
 * @summary Get user's own exercises
 */
export const useGetMyExercisesApiV1ExercisesMyExercisesGet = <
  TData = Awaited<
    ReturnType<typeof getMyExercisesApiV1ExercisesMyExercisesGet>
  >,
  TError = HTTPValidationError,
>(
  params?: GetMyExercisesApiV1ExercisesMyExercisesGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMyExercisesApiV1ExercisesMyExercisesGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetMyExercisesApiV1ExercisesMyExercisesGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get exercises filtered by body part with pagination.
 * @summary Get exercises by body part
 */
export const getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet = (
  bodyPart: string,
  params?: GetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageExerciseResponse>(
    {
      url: `/api/v1/exercises/by-body-part/${bodyPart}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getGetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetQueryKey =
  (
    bodyPart: string,
    params?: GetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetParams,
  ) => {
    return [
      `/api/v1/exercises/by-body-part/${bodyPart}`,
      ...(params ? [params] : []),
    ] as const;
  };

export const getGetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet
      >
    >,
    TError = HTTPValidationError,
  >(
    bodyPart: string,
    params?: GetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof customInstance>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetQueryKey(
        bodyPart,
        params,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet
        >
      >
    > = ({ signal }) =>
      getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet(
        bodyPart,
        params,
        requestOptions,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!bodyPart,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet
      >
    >
  >;
export type GetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetQueryError =
  HTTPValidationError;

/**
 * @summary Get exercises by body part
 */
export const useGetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet = <
  TData = Awaited<
    ReturnType<typeof getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet>
  >,
  TError = HTTPValidationError,
>(
  bodyPart: string,
  params?: GetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGet
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetExercisesByBodyPartApiV1ExercisesByBodyPartBodyPartGetQueryOptions(
      bodyPart,
      params,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get exercises filtered by modality with pagination.
 * @summary Get exercises by modality
 */
export const getExercisesByModalityApiV1ExercisesByModalityModalityGet = (
  modality: string,
  params?: GetExercisesByModalityApiV1ExercisesByModalityModalityGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageExerciseResponse>(
    {
      url: `/api/v1/exercises/by-modality/${modality}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getGetExercisesByModalityApiV1ExercisesByModalityModalityGetQueryKey =
  (
    modality: string,
    params?: GetExercisesByModalityApiV1ExercisesByModalityModalityGetParams,
  ) => {
    return [
      `/api/v1/exercises/by-modality/${modality}`,
      ...(params ? [params] : []),
    ] as const;
  };

export const getGetExercisesByModalityApiV1ExercisesByModalityModalityGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getExercisesByModalityApiV1ExercisesByModalityModalityGet
      >
    >,
    TError = HTTPValidationError,
  >(
    modality: string,
    params?: GetExercisesByModalityApiV1ExercisesByModalityModalityGetParams,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getExercisesByModalityApiV1ExercisesByModalityModalityGet
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof customInstance>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetExercisesByModalityApiV1ExercisesByModalityModalityGetQueryKey(
        modality,
        params,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getExercisesByModalityApiV1ExercisesByModalityModalityGet
        >
      >
    > = ({ signal }) =>
      getExercisesByModalityApiV1ExercisesByModalityModalityGet(
        modality,
        params,
        requestOptions,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!modality,
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getExercisesByModalityApiV1ExercisesByModalityModalityGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetExercisesByModalityApiV1ExercisesByModalityModalityGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getExercisesByModalityApiV1ExercisesByModalityModalityGet
      >
    >
  >;
export type GetExercisesByModalityApiV1ExercisesByModalityModalityGetQueryError =
  HTTPValidationError;

/**
 * @summary Get exercises by modality
 */
export const useGetExercisesByModalityApiV1ExercisesByModalityModalityGet = <
  TData = Awaited<
    ReturnType<typeof getExercisesByModalityApiV1ExercisesByModalityModalityGet>
  >,
  TError = HTTPValidationError,
>(
  modality: string,
  params?: GetExercisesByModalityApiV1ExercisesByModalityModalityGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<
            typeof getExercisesByModalityApiV1ExercisesByModalityModalityGet
          >
        >,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetExercisesByModalityApiV1ExercisesByModalityModalityGetQueryOptions(
      modality,
      params,
      options,
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get a specific exercise by ID. Public endpoint - shows only system exercises unless authenticated.
 * @summary Get exercise by ID
 */
export const getExerciseApiV1ExercisesExerciseIdGet = (
  exerciseId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ExerciseResponse>(
    { url: `/api/v1/exercises/${exerciseId}`, method: "GET", signal },
    options,
  );
};

export const getGetExerciseApiV1ExercisesExerciseIdGetQueryKey = (
  exerciseId: number,
) => {
  return [`/api/v1/exercises/${exerciseId}`] as const;
};

export const getGetExerciseApiV1ExercisesExerciseIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getExerciseApiV1ExercisesExerciseIdGet>>,
  TError = HTTPValidationError,
>(
  exerciseId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExerciseApiV1ExercisesExerciseIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetExerciseApiV1ExercisesExerciseIdGetQueryKey(exerciseId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getExerciseApiV1ExercisesExerciseIdGet>>
  > = ({ signal }) =>
    getExerciseApiV1ExercisesExerciseIdGet(exerciseId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!exerciseId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getExerciseApiV1ExercisesExerciseIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetExerciseApiV1ExercisesExerciseIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getExerciseApiV1ExercisesExerciseIdGet>>
>;
export type GetExerciseApiV1ExercisesExerciseIdGetQueryError =
  HTTPValidationError;

/**
 * @summary Get exercise by ID
 */
export const useGetExerciseApiV1ExercisesExerciseIdGet = <
  TData = Awaited<ReturnType<typeof getExerciseApiV1ExercisesExerciseIdGet>>,
  TError = HTTPValidationError,
>(
  exerciseId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getExerciseApiV1ExercisesExerciseIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetExerciseApiV1ExercisesExerciseIdGetQueryOptions(
    exerciseId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update an existing user exercise. Users can only update their own exercises.
 * @summary Update exercise
 */
export const updateExerciseApiV1ExercisesExerciseIdPatch = (
  exerciseId: number,
  exerciseUpdate: ExerciseUpdate,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ExerciseResponse>(
    {
      url: `/api/v1/exercises/${exerciseId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: exerciseUpdate,
    },
    options,
  );
};

export const getUpdateExerciseApiV1ExercisesExerciseIdPatchMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExerciseApiV1ExercisesExerciseIdPatch>>,
    TError,
    { exerciseId: number; data: ExerciseUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateExerciseApiV1ExercisesExerciseIdPatch>>,
  TError,
  { exerciseId: number; data: ExerciseUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateExerciseApiV1ExercisesExerciseIdPatch>>,
    { exerciseId: number; data: ExerciseUpdate }
  > = (props) => {
    const { exerciseId, data } = props ?? {};

    return updateExerciseApiV1ExercisesExerciseIdPatch(
      exerciseId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateExerciseApiV1ExercisesExerciseIdPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateExerciseApiV1ExercisesExerciseIdPatch>>
  >;
export type UpdateExerciseApiV1ExercisesExerciseIdPatchMutationBody =
  ExerciseUpdate;
export type UpdateExerciseApiV1ExercisesExerciseIdPatchMutationError =
  HTTPValidationError;

/**
 * @summary Update exercise
 */
export const useUpdateExerciseApiV1ExercisesExerciseIdPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExerciseApiV1ExercisesExerciseIdPatch>>,
    TError,
    { exerciseId: number; data: ExerciseUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateExerciseApiV1ExercisesExerciseIdPatch>>,
  TError,
  { exerciseId: number; data: ExerciseUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateExerciseApiV1ExercisesExerciseIdPatchMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Update an existing user exercise. Users can only update their own exercises.
 * @summary Update exercise (PUT)
 */
export const updateExercisePutApiV1ExercisesExerciseIdPut = (
  exerciseId: number,
  exerciseUpdate: ExerciseUpdate,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ExerciseResponse>(
    {
      url: `/api/v1/exercises/${exerciseId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: exerciseUpdate,
    },
    options,
  );
};

export const getUpdateExercisePutApiV1ExercisesExerciseIdPutMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExercisePutApiV1ExercisesExerciseIdPut>>,
    TError,
    { exerciseId: number; data: ExerciseUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateExercisePutApiV1ExercisesExerciseIdPut>>,
  TError,
  { exerciseId: number; data: ExerciseUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateExercisePutApiV1ExercisesExerciseIdPut>>,
    { exerciseId: number; data: ExerciseUpdate }
  > = (props) => {
    const { exerciseId, data } = props ?? {};

    return updateExercisePutApiV1ExercisesExerciseIdPut(
      exerciseId,
      data,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateExercisePutApiV1ExercisesExerciseIdPutMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof updateExercisePutApiV1ExercisesExerciseIdPut>>
  >;
export type UpdateExercisePutApiV1ExercisesExerciseIdPutMutationBody =
  ExerciseUpdate;
export type UpdateExercisePutApiV1ExercisesExerciseIdPutMutationError =
  HTTPValidationError;

/**
 * @summary Update exercise (PUT)
 */
export const useUpdateExercisePutApiV1ExercisesExerciseIdPut = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateExercisePutApiV1ExercisesExerciseIdPut>>,
    TError,
    { exerciseId: number; data: ExerciseUpdate },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateExercisePutApiV1ExercisesExerciseIdPut>>,
  TError,
  { exerciseId: number; data: ExerciseUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateExercisePutApiV1ExercisesExerciseIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete a user exercise. Users can only delete their own exercises.
 * @summary Delete exercise
 */
export const deleteExerciseApiV1ExercisesExerciseIdDelete = (
  exerciseId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/exercises/${exerciseId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteExerciseApiV1ExercisesExerciseIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExerciseApiV1ExercisesExerciseIdDelete>>,
    TError,
    { exerciseId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteExerciseApiV1ExercisesExerciseIdDelete>>,
  TError,
  { exerciseId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteExerciseApiV1ExercisesExerciseIdDelete>>,
    { exerciseId: number }
  > = (props) => {
    const { exerciseId } = props ?? {};

    return deleteExerciseApiV1ExercisesExerciseIdDelete(
      exerciseId,
      requestOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteExerciseApiV1ExercisesExerciseIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteExerciseApiV1ExercisesExerciseIdDelete>>
  >;

export type DeleteExerciseApiV1ExercisesExerciseIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete exercise
 */
export const useDeleteExerciseApiV1ExercisesExerciseIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExerciseApiV1ExercisesExerciseIdDelete>>,
    TError,
    { exerciseId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteExerciseApiV1ExercisesExerciseIdDelete>>,
  TError,
  { exerciseId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteExerciseApiV1ExercisesExerciseIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * List user workouts with optional filters and pagination.
 * @summary List Workouts
 */
export const listWorkoutsApiV1WorkoutsGet = (
  params?: ListWorkoutsApiV1WorkoutsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PageWorkoutResponse>(
    { url: `/api/v1/workouts/`, method: "GET", params, signal },
    options,
  );
};

export const getListWorkoutsApiV1WorkoutsGetQueryKey = (
  params?: ListWorkoutsApiV1WorkoutsGetParams,
) => {
  return [`/api/v1/workouts/`, ...(params ? [params] : [])] as const;
};

export const getListWorkoutsApiV1WorkoutsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listWorkoutsApiV1WorkoutsGet>>,
  TError = HTTPValidationError,
>(
  params?: ListWorkoutsApiV1WorkoutsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listWorkoutsApiV1WorkoutsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListWorkoutsApiV1WorkoutsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listWorkoutsApiV1WorkoutsGet>>
  > = ({ signal }) =>
    listWorkoutsApiV1WorkoutsGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listWorkoutsApiV1WorkoutsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListWorkoutsApiV1WorkoutsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listWorkoutsApiV1WorkoutsGet>>
>;
export type ListWorkoutsApiV1WorkoutsGetQueryError = HTTPValidationError;

/**
 * @summary List Workouts
 */
export const useListWorkoutsApiV1WorkoutsGet = <
  TData = Awaited<ReturnType<typeof listWorkoutsApiV1WorkoutsGet>>,
  TError = HTTPValidationError,
>(
  params?: ListWorkoutsApiV1WorkoutsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listWorkoutsApiV1WorkoutsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListWorkoutsApiV1WorkoutsGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new workout session.
 * @summary Create Workout
 */
export const createWorkoutApiV1WorkoutsPost = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<WorkoutResponse>(
    { url: `/api/v1/workouts/`, method: "POST" },
    options,
  );
};

export const getCreateWorkoutApiV1WorkoutsPostMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkoutApiV1WorkoutsPost>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWorkoutApiV1WorkoutsPost>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWorkoutApiV1WorkoutsPost>>,
    void
  > = () => {
    return createWorkoutApiV1WorkoutsPost(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWorkoutApiV1WorkoutsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWorkoutApiV1WorkoutsPost>>
>;

export type CreateWorkoutApiV1WorkoutsPostMutationError = unknown;

/**
 * @summary Create Workout
 */
export const useCreateWorkoutApiV1WorkoutsPost = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorkoutApiV1WorkoutsPost>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createWorkoutApiV1WorkoutsPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getCreateWorkoutApiV1WorkoutsPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get a single workout with full details.
 * @summary Get Workout
 */
export const getWorkoutApiV1WorkoutsWorkoutIdGet = (
  workoutId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<WorkoutResponse>(
    { url: `/api/v1/workouts/${workoutId}`, method: "GET", signal },
    options,
  );
};

export const getGetWorkoutApiV1WorkoutsWorkoutIdGetQueryKey = (
  workoutId: number,
) => {
  return [`/api/v1/workouts/${workoutId}`] as const;
};

export const getGetWorkoutApiV1WorkoutsWorkoutIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkoutApiV1WorkoutsWorkoutIdGet>>,
  TError = HTTPValidationError,
>(
  workoutId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkoutApiV1WorkoutsWorkoutIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetWorkoutApiV1WorkoutsWorkoutIdGetQueryKey(workoutId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWorkoutApiV1WorkoutsWorkoutIdGet>>
  > = ({ signal }) =>
    getWorkoutApiV1WorkoutsWorkoutIdGet(workoutId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!workoutId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkoutApiV1WorkoutsWorkoutIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWorkoutApiV1WorkoutsWorkoutIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorkoutApiV1WorkoutsWorkoutIdGet>>
>;
export type GetWorkoutApiV1WorkoutsWorkoutIdGetQueryError = HTTPValidationError;

/**
 * @summary Get Workout
 */
export const useGetWorkoutApiV1WorkoutsWorkoutIdGet = <
  TData = Awaited<ReturnType<typeof getWorkoutApiV1WorkoutsWorkoutIdGet>>,
  TError = HTTPValidationError,
>(
  workoutId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkoutApiV1WorkoutsWorkoutIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWorkoutApiV1WorkoutsWorkoutIdGetQueryOptions(
    workoutId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Delete a workout.
 * @summary Delete Workout
 */
export const deleteWorkoutApiV1WorkoutsWorkoutIdDelete = (
  workoutId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/v1/workouts/${workoutId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteWorkoutApiV1WorkoutsWorkoutIdDeleteMutationOptions = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkoutApiV1WorkoutsWorkoutIdDelete>>,
    TError,
    { workoutId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWorkoutApiV1WorkoutsWorkoutIdDelete>>,
  TError,
  { workoutId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWorkoutApiV1WorkoutsWorkoutIdDelete>>,
    { workoutId: number }
  > = (props) => {
    const { workoutId } = props ?? {};

    return deleteWorkoutApiV1WorkoutsWorkoutIdDelete(workoutId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWorkoutApiV1WorkoutsWorkoutIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteWorkoutApiV1WorkoutsWorkoutIdDelete>>
  >;

export type DeleteWorkoutApiV1WorkoutsWorkoutIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Workout
 */
export const useDeleteWorkoutApiV1WorkoutsWorkoutIdDelete = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkoutApiV1WorkoutsWorkoutIdDelete>>,
    TError,
    { workoutId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteWorkoutApiV1WorkoutsWorkoutIdDelete>>,
  TError,
  { workoutId: number },
  TContext
> => {
  const mutationOptions =
    getDeleteWorkoutApiV1WorkoutsWorkoutIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Finish a workout session.
 * @summary Finish Workout
 */
export const finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch = (
  workoutId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<WorkoutResponse>(
    { url: `/api/v1/workouts/${workoutId}/finish`, method: "PATCH" },
    options,
  );
};

export const getFinishWorkoutApiV1WorkoutsWorkoutIdFinishPatchMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch>
      >,
      TError,
      { workoutId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch>>,
    TError,
    { workoutId: number },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch>
      >,
      { workoutId: number }
    > = (props) => {
      const { workoutId } = props ?? {};

      return finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch(
        workoutId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type FinishWorkoutApiV1WorkoutsWorkoutIdFinishPatchMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch>>
  >;

export type FinishWorkoutApiV1WorkoutsWorkoutIdFinishPatchMutationError =
  HTTPValidationError;

/**
 * @summary Finish Workout
 */
export const useFinishWorkoutApiV1WorkoutsWorkoutIdFinishPatch = <
  TError = HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch>>,
    TError,
    { workoutId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof finishWorkoutApiV1WorkoutsWorkoutIdFinishPatch>>,
  TError,
  { workoutId: number },
  TContext
> => {
  const mutationOptions =
    getFinishWorkoutApiV1WorkoutsWorkoutIdFinishPatchMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Reorder exercises in a workout.
 * @summary Reorder Exercises
 */
export const reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch =
  (
    workoutId: number,
    exerciseReorderRequest: ExerciseReorderRequest,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<ExerciseReorderResponse>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/reorder`,
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        data: exerciseReorderRequest,
      },
      options,
    );
  };

export const getReorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatchMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch
        >
      >,
      TError,
      { workoutId: number; data: ExerciseReorderRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch
      >
    >,
    TError,
    { workoutId: number; data: ExerciseReorderRequest },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch
        >
      >,
      { workoutId: number; data: ExerciseReorderRequest }
    > = (props) => {
      const { workoutId, data } = props ?? {};

      return reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch(
        workoutId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type ReorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatchMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch
      >
    >
  >;
export type ReorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatchMutationBody =
  ExerciseReorderRequest;
export type ReorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatchMutationError =
  HTTPValidationError;

/**
 * @summary Reorder Exercises
 */
export const useReorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch
        >
      >,
      TError,
      { workoutId: number; data: ExerciseReorderRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof reorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatch
      >
    >,
    TError,
    { workoutId: number; data: ExerciseReorderRequest },
    TContext
  > => {
    const mutationOptions =
      getReorderExercisesApiV1WorkoutsWorkoutIdExerciseExecutionsReorderPatchMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };

/**
 * Get exercise execution with sets.
 * @summary Get Exercise Execution
 */
export const getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet =
  (
    workoutId: number,
    exerciseId: number,
    options?: SecondParameter<typeof customInstance>,
    signal?: AbortSignal,
  ) => {
    return customInstance<ExerciseExecutionResponse>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}`,
        method: "GET",
        signal,
      },
      options,
    );
  };

export const getGetExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGetQueryKey =
  (workoutId: number, exerciseId: number) => {
    return [
      `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}`,
    ] as const;
  };

export const getGetExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<
        typeof getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet
      >
    >,
    TError = HTTPValidationError,
  >(
    workoutId: number,
    exerciseId: number,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof customInstance>;
    },
  ) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGetQueryKey(
        workoutId,
        exerciseId,
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet
        >
      >
    > = ({ signal }) =>
      getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet(
        workoutId,
        exerciseId,
        requestOptions,
        signal,
      );

    return {
      queryKey,
      queryFn,
      enabled: !!(workoutId && exerciseId),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<
          typeof getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet
        >
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type GetExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet
      >
    >
  >;
export type GetExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGetQueryError =
  HTTPValidationError;

/**
 * @summary Get Exercise Execution
 */
export const useGetExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet =
  <
    TData = Awaited<
      ReturnType<
        typeof getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet
      >
    >,
    TError = HTTPValidationError,
  >(
    workoutId: number,
    exerciseId: number,
    options?: {
      query?: Partial<
        UseQueryOptions<
          Awaited<
            ReturnType<
              typeof getExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGet
            >
          >,
          TError,
          TData
        >
      >;
      request?: SecondParameter<typeof customInstance>;
    },
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const queryOptions =
      getGetExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdGetQueryOptions(
        workoutId,
        exerciseId,
        options,
      );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
      queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
  };

/**
 * Create or update exercise execution with full replacement of sets.
 * @summary Upsert Exercise Execution
 */
export const upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut =
  (
    workoutId: number,
    exerciseId: number,
    exerciseExecutionRequest: ExerciseExecutionRequest,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<ExerciseExecutionResponse>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}`,
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        data: exerciseExecutionRequest,
      },
      options,
    );
  };

export const getUpsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPutMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; data: ExerciseExecutionRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; data: ExerciseExecutionRequest },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut
        >
      >,
      { workoutId: number; exerciseId: number; data: ExerciseExecutionRequest }
    > = (props) => {
      const { workoutId, exerciseId, data } = props ?? {};

      return upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut(
        workoutId,
        exerciseId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPutMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut
      >
    >
  >;
export type UpsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPutMutationBody =
  ExerciseExecutionRequest;
export type UpsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPutMutationError =
  HTTPValidationError;

/**
 * @summary Upsert Exercise Execution
 */
export const useUpsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; data: ExerciseExecutionRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof upsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPut
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; data: ExerciseExecutionRequest },
    TContext
  > => {
    const mutationOptions =
      getUpsertExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPutMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };

/**
 * Remove exercise from workout.
 * @summary Delete Exercise Execution
 */
export const deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete =
  (
    workoutId: number,
    exerciseId: number,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}`,
        method: "DELETE",
      },
      options,
    );
  };

export const getDeleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDeleteMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete
        >
      >,
      TError,
      { workoutId: number; exerciseId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete
      >
    >,
    TError,
    { workoutId: number; exerciseId: number },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete
        >
      >,
      { workoutId: number; exerciseId: number }
    > = (props) => {
      const { workoutId, exerciseId } = props ?? {};

      return deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete(
        workoutId,
        exerciseId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete
      >
    >
  >;

export type DeleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Exercise Execution
 */
export const useDeleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete
        >
      >,
      TError,
      { workoutId: number; exerciseId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof deleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDelete
      >
    >,
    TError,
    { workoutId: number; exerciseId: number },
    TContext
  > => {
    const mutationOptions =
      getDeleteExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdDeleteMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };

/**
 * Update exercise execution metadata (notes, order) without touching sets.
 * @summary Update Exercise Execution
 */
export const updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch =
  (
    workoutId: number,
    exerciseId: number,
    exerciseExecutionUpdate: ExerciseExecutionUpdate,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<ExerciseExecutionResponse>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}`,
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        data: exerciseExecutionUpdate,
      },
      options,
    );
  };

export const getUpdateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatchMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; data: ExerciseExecutionUpdate },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; data: ExerciseExecutionUpdate },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch
        >
      >,
      { workoutId: number; exerciseId: number; data: ExerciseExecutionUpdate }
    > = (props) => {
      const { workoutId, exerciseId, data } = props ?? {};

      return updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch(
        workoutId,
        exerciseId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatchMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch
      >
    >
  >;
export type UpdateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatchMutationBody =
  ExerciseExecutionUpdate;
export type UpdateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatchMutationError =
  HTTPValidationError;

/**
 * @summary Update Exercise Execution
 */
export const useUpdateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; data: ExerciseExecutionUpdate },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof updateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatch
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; data: ExerciseExecutionUpdate },
    TContext
  > => {
    const mutationOptions =
      getUpdateExerciseExecutionApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdPatchMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };

/**
 * Add a single set to an exercise execution.
 * @summary Create Set
 */
export const createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost =
  (
    workoutId: number,
    exerciseId: number,
    setCreate: SetCreate,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SetResponse>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}/sets`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: setCreate,
      },
      options,
    );
  };

export const getCreateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPostMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; data: SetCreate },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; data: SetCreate },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost
        >
      >,
      { workoutId: number; exerciseId: number; data: SetCreate }
    > = (props) => {
      const { workoutId, exerciseId, data } = props ?? {};

      return createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost(
        workoutId,
        exerciseId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CreateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost
      >
    >
  >;
export type CreateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPostMutationBody =
  SetCreate;
export type CreateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPostMutationError =
  HTTPValidationError;

/**
 * @summary Create Set
 */
export const useCreateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; data: SetCreate },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof createSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPost
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; data: SetCreate },
    TContext
  > => {
    const mutationOptions =
      getCreateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsPostMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };

/**
 * Update a single set.
 * @summary Update Set
 */
export const updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch =
  (
    workoutId: number,
    exerciseId: number,
    setId: number,
    setUpdate: SetUpdate,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<SetResponse>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}/sets/${setId}`,
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        data: setUpdate,
      },
      options,
    );
  };

export const getUpdateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatchMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; setId: number; data: SetUpdate },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; setId: number; data: SetUpdate },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch
        >
      >,
      { workoutId: number; exerciseId: number; setId: number; data: SetUpdate }
    > = (props) => {
      const { workoutId, exerciseId, setId, data } = props ?? {};

      return updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch(
        workoutId,
        exerciseId,
        setId,
        data,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type UpdateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatchMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch
      >
    >
  >;
export type UpdateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatchMutationBody =
  SetUpdate;
export type UpdateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatchMutationError =
  HTTPValidationError;

/**
 * @summary Update Set
 */
export const useUpdateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; setId: number; data: SetUpdate },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof updateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatch
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; setId: number; data: SetUpdate },
    TContext
  > => {
    const mutationOptions =
      getUpdateSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdPatchMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };

/**
 * Delete a single set.
 * @summary Delete Set
 */
export const deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete =
  (
    workoutId: number,
    exerciseId: number,
    setId: number,
    options?: SecondParameter<typeof customInstance>,
  ) => {
    return customInstance<void>(
      {
        url: `/api/v1/workouts/${workoutId}/exercise-executions/${exerciseId}/sets/${setId}`,
        method: "DELETE",
      },
      options,
    );
  };

export const getDeleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDeleteMutationOptions =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; setId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationOptions<
    Awaited<
      ReturnType<
        typeof deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; setId: number },
    TContext
  > => {
    const { mutation: mutationOptions, request: requestOptions } =
      options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<
          typeof deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete
        >
      >,
      { workoutId: number; exerciseId: number; setId: number }
    > = (props) => {
      const { workoutId, exerciseId, setId } = props ?? {};

      return deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete(
        workoutId,
        exerciseId,
        setId,
        requestOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type DeleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDeleteMutationResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete
      >
    >
  >;

export type DeleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDeleteMutationError =
  HTTPValidationError;

/**
 * @summary Delete Set
 */
export const useDeleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete =
  <TError = HTTPValidationError, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<
          typeof deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete
        >
      >,
      TError,
      { workoutId: number; exerciseId: number; setId: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  }): UseMutationResult<
    Awaited<
      ReturnType<
        typeof deleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDelete
      >
    >,
    TError,
    { workoutId: number; exerciseId: number; setId: number },
    TContext
  > => {
    const mutationOptions =
      getDeleteSetApiV1WorkoutsWorkoutIdExerciseExecutionsExerciseIdSetsSetIdDeleteMutationOptions(
        options,
      );

    return useMutation(mutationOptions);
  };
