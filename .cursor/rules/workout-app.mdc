---
description: 
globs: 
alwaysApply: false
---
# Workout App Project Rules

## Project Context
Building a workout tracking web app with backend-first approach using Python, FastAPI, and PostgreSQL. Frontend will follow using TypeScript, Next.js 14, and ShadCN UI.

## Key Project Decisions

### Technology Stack
- **Backend**: Python 3.12+ + FastAPI + SQLAlchemy 2.0 + PostgreSQL
- **Testing**: pytest + testcontainers + transaction isolation
- **Development**: uv + Atlas + ruff + pre-commit + gitleaks
- **Frontend** (Future): TypeScript + Next.js 14 + ShadCN UI + Tailwind CSS
- **Auth**: Google OAuth2 with JWT tokens

### Business Rules
1. Each exercise can only appear once per workout
2. Exercise order matters (use exercise_order field)
3. System exercises (is_user_created=false) are read-only
4. Set IDs are autogenerated - never include in PUT requests
5. All weights in pounds (float)
6. All timestamps in UTC

### Backend Architecture
- **Functional Cohesion**: Organize by domain (auth/, exercises/, workouts/)
- **Repository Pattern**: All database operations in repository classes
- **Service Layer**: Business logic separate from data access
- **Dependency Injection**: Use FastAPI's Depends system
- **Async Everywhere**: All database operations must be async

### API Patterns
- Nested resources: `/workouts/{id}/exercise-executions/{exerciseId}`
- No general workout PATCH - only specific operations
- PUT for full replacement (exercise executions)
- Consistent error responses with type field
- Pagination on all list endpoints

### Database Patterns
```python
# Use SQLAlchemy 2.0 syntax
class Exercise(BaseModel):
    __tablename__ = "exercises"
    
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(255), nullable=False)
    
# Transaction pattern
async with session.begin():
    # Operations auto-commit on success
    # Auto-rollback on exception
```

### Testing Patterns
```python
# Transaction isolation for tests
@pytest.fixture
async def session(db_engine):
    async with db_engine.begin() as conn:
        async with async_session_maker(bind=conn) as session:
            yield session
            await session.rollback()

# Use same session in API and tests
app.dependency_overrides[get_session] = lambda: session
```

### Development Workflow
```bash
task dev       # Run development server
task test      # Run all tests
task lint      # Run linting
task migrate   # Run migrations
```

### Code Style Preferences
- Use Pydantic for all API validation
- Keep business logic in service layer
- Repository methods should be simple queries
- Use type hints everywhere
- Descriptive variable names over comments

### Current State (as of last update)
- Backend design complete (see docs/backend_design.md)
- Ready to implement backend API
- Using backend-first approach
- Frontend development will follow after API is stable

### Common Patterns to Follow
```python
# Repository pattern
class ExerciseRepository:
    async def search(self, query: str) -> list[Exercise]:
        stmt = select(Exercise).where(
            Exercise.name.ilike(f"%{query}%")
        )
        result = await self.session.execute(stmt)
        return result.scalars().all()

# Service pattern
class ExerciseService:
    async def create_exercise(
        self,
        user_id: int,
        data: ExerciseCreate
    ) -> Exercise:
        # Business validation here
        return await self.repo.create(data)

# Router pattern
@router.get("/exercises")
async def list_exercises(
    service: ExerciseService = Depends(get_exercise_service),
    filters: ExerciseFilters = Depends(),
):
    return await service.list_exercises(filters)
```

### Things to Avoid
- Don't use sync database operations (always async)
- Don't put business logic in routers
- Don't skip transaction management
- Don't use mutable default arguments
- Don't commit secrets (pre-commit prevents this)
- Don't create workout templates yet (deferred)

### Security First
- All endpoints require authentication (except auth endpoints)
- Use dependency injection for current user
- Validate user owns resources before operations
- Environment variables for all secrets
- Pre-commit hooks catch security issues

### Performance Guidelines
- Use selectinload for eager loading when needed
- Implement pagination on all list endpoints
- Connection pooling configured in engine
- Avoid N+1 queries with proper joins
- Index foreign keys and search fields
