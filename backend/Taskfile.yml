version: '3'

vars:
  PYTHON: uv run python
  SRC_DIR: src
  TEST_DIR: tests
  PROJECT_NAME: workout_api

tasks:
  default:
    desc: List available tasks
    cmds:
      - task --list

  install:
    desc: Install dependencies
    cmds:
      - uv sync

  run:
    desc: Run the development server with hypercorn
    cmds:
      - uv run hypercorn {{.PROJECT_NAME}}.core.main:app --bind 0.0.0.0:8080 --reload

  dev:
    desc: Run development server (alias for run)
    cmds:
      - task: run

  run:http2:
    desc: Run server with HTTP/2 enabled
    cmds:
      - uv run hypercorn {{.PROJECT_NAME}}.core.main:app --bind 0.0.0.0:8080 --reload --h2

  run:prod:
    desc: Run production server (multi-worker)
    cmds:
      - uv run hypercorn {{.PROJECT_NAME}}.core.main:app --bind 0.0.0.0:8080 --workers 4 --worker-class asyncio

  test:
    desc: Run tests
    cmds:
      - uv run pytest {{.CLI_ARGS}}

  test-cov:
    desc: Run tests with coverage
    cmds:
      - uv run pytest --cov={{.SRC_DIR}} --cov-report=html --cov-report=term {{.CLI_ARGS}}

  lint:
    desc: Check code style and linting
    cmds:
      - uv run ruff check {{.SRC_DIR}} {{.TEST_DIR}}
      - uv run ruff format --check {{.SRC_DIR}} {{.TEST_DIR}}

  lint-fix:
    desc: Fix linting issues and format code
    cmds:
      - uv run ruff format {{.SRC_DIR}} {{.TEST_DIR}}
      - uv run ruff check {{.SRC_DIR}} {{.TEST_DIR}} --fix

  # OpenAPI Generation Tasks
  generate-openapi:
    desc: Generate OpenAPI spec from FastAPI app
    cmds:
      - uv run python -c "from {{.PROJECT_NAME}}.core.main import app; import json; open('openapi.json', 'w').write(json.dumps(app.openapi(), indent=2).strip())"
      - echo "OpenAPI spec generated at openapi.json"

  generate-openapi-frontend:
    desc: Generate OpenAPI spec and copy to frontend
    cmds:
      - task: generate-openapi
      - cp openapi.json ../frontend/openapi.json
      - echo "OpenAPI spec copied to frontend/openapi.json"

  validate-openapi:
    desc: Validate that OpenAPI spec is current
    cmds:
      - task: generate-openapi
      - git diff --exit-code openapi.json || (echo "⚠️  OpenAPI spec is out of date! Run 'task generate-openapi' to update" && exit 1)
      - echo "✅ OpenAPI spec is current"

  # Database Migration Tasks (Atlas)
  db:diff:
    desc: Generate new migration diff for local environment
    cmds:
      - uv run atlas migrate diff --env local

  db:diff:prod:
    desc: Generate new migration diff for production environment
    cmds:
      - uv run atlas migrate diff --env prod

  db:migrate:
    desc: Apply pending migrations to local database
    cmds:
      - uv run atlas migrate apply --env local

  db:migrate:prod:
    desc: Apply pending migrations to production database
    cmds:
      - uv run atlas migrate apply --env prod

  db:status:
    desc: Check migration status for local database
    cmds:
      - uv run atlas migrate status --env local

  db:status:prod:
    desc: Check migration status for production database
    cmds:
      - uv run atlas migrate status --env prod

  db:validate:
    desc: Validate migration files
    cmds:
      - uv run atlas migrate validate --env local

  shell:
    desc: Start IPython shell with app context
    cmds:
      - uv run ipython -i -c "from {{.PROJECT_NAME}}.core.main import *"

  docker-up:
    desc: Start docker services
    cmds:
      - docker-compose up -d

  docker-down:
    desc: Stop docker services
    cmds:
      - docker-compose down

  pre-commit:
    desc: Run pre-commit hooks
    cmds:
      - pre-commit run --all-files
